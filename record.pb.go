// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.21.12
// source: record.proto

package logging

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Severity numbers are inspired by OTEL severity numbers.
// https://opentelemetry.io/docs/specs/otel/logs/data-model/#mapping-of-severitynumber
// The gaps allow to insert special levels in the future.
type Severity int32

const (
	Severity_SeverityUnspecified Severity = 0
	Severity_Trace               Severity = 4
	Severity_Debug               Severity = 8
	Severity_Info                Severity = 12
	Severity_Warn                Severity = 16
	Severity_Error               Severity = 20
	Severity_Fatal               Severity = 24
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0:  "SeverityUnspecified",
		4:  "Trace",
		8:  "Debug",
		12: "Info",
		16: "Warn",
		20: "Error",
		24: "Fatal",
	}
	Severity_value = map[string]int32{
		"SeverityUnspecified": 0,
		"Trace":               4,
		"Debug":               8,
		"Info":                12,
		"Warn":                16,
		"Error":               20,
		"Fatal":               24,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

type AuthMethod int32

const (
	AuthMethod_AuthMethodUnspecified AuthMethod = 0
	AuthMethod_SystemUserToken       AuthMethod = 1
	AuthMethod_OIDCAccessToken       AuthMethod = 2
	AuthMethod_OIDCRefreshToken      AuthMethod = 3
	AuthMethod_SessionAPI            AuthMethod = 4
	AuthMethod_SAMLResponse          AuthMethod = 5
)

// Enum value maps for AuthMethod.
var (
	AuthMethod_name = map[int32]string{
		0: "AuthMethodUnspecified",
		1: "SystemUserToken",
		2: "OIDCAccessToken",
		3: "OIDCRefreshToken",
		4: "SessionAPI",
		5: "SAMLResponse",
	}
	AuthMethod_value = map[string]int32{
		"AuthMethodUnspecified": 0,
		"SystemUserToken":       1,
		"OIDCAccessToken":       2,
		"OIDCRefreshToken":      3,
		"SessionAPI":            4,
		"SAMLResponse":          5,
	}
)

func (x AuthMethod) Enum() *AuthMethod {
	p := new(AuthMethod)
	*p = x
	return p
}

func (x AuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[1].Descriptor()
}

func (AuthMethod) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[1]
}

func (x AuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthMethod.Descriptor instead.
func (AuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

type HTTPMethod int32

const (
	HTTPMethod_HTTPMethodUndefined HTTPMethod = 0
	HTTPMethod_GET                 HTTPMethod = 1
	HTTPMethod_POST                HTTPMethod = 2
	HTTPMethod_PUT                 HTTPMethod = 3
	HTTPMethod_PATCH               HTTPMethod = 4
	HTTPMethod_DELETE              HTTPMethod = 5
	HTTPMethod_OTHER               HTTPMethod = 19
)

// Enum value maps for HTTPMethod.
var (
	HTTPMethod_name = map[int32]string{
		0:  "HTTPMethodUndefined",
		1:  "GET",
		2:  "POST",
		3:  "PUT",
		4:  "PATCH",
		5:  "DELETE",
		19: "OTHER",
	}
	HTTPMethod_value = map[string]int32{
		"HTTPMethodUndefined": 0,
		"GET":                 1,
		"POST":                2,
		"PUT":                 3,
		"PATCH":               4,
		"DELETE":              5,
		"OTHER":               19,
	}
)

func (x HTTPMethod) Enum() *HTTPMethod {
	p := new(HTTPMethod)
	*p = x
	return p
}

func (x HTTPMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[2].Descriptor()
}

func (HTTPMethod) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[2]
}

func (x HTTPMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPMethod.Descriptor instead.
func (HTTPMethod) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Record:
	//
	//	*Record_RecordV1
	Record        isRecord_Record `protobuf_oneof:"record"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetRecord() isRecord_Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *Record) GetRecordV1() *RecordV1 {
	if x != nil {
		if x, ok := x.Record.(*Record_RecordV1); ok {
			return x.RecordV1
		}
	}
	return nil
}

type isRecord_Record interface {
	isRecord_Record()
}

type Record_RecordV1 struct {
	RecordV1 *RecordV1 `protobuf:"bytes,1,opt,name=record_v1,json=recordV1,proto3,oneof"`
}

func (*Record_RecordV1) isRecord_Record() {}

type RecordV1 struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Time       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Severity   Severity               `protobuf:"varint,2,opt,name=severity,proto3,enum=Severity" json:"severity,omitempty"`
	Message    string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Service    *string                `protobuf:"bytes,4,opt,name=service,proto3,oneof" json:"service,omitempty"`
	Version    *string                `protobuf:"bytes,5,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Instance   *string                `protobuf:"bytes,6,opt,name=instance,proto3,oneof" json:"instance,omitempty"` // This is the process instance like for example the pod ID
	StackTrace []string               `protobuf:"bytes,7,rep,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	Dynamic    *structpb.Struct       `protobuf:"bytes,8,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	// Types that are valid to be assigned to Auth:
	//
	//	*RecordV1_AuthV1
	Auth isRecordV1_Auth `protobuf_oneof:"auth"`
	// Types that are valid to be assigned to Api:
	//
	//	*RecordV1_ApiV1
	Api isRecordV1_Api `protobuf_oneof:"api"`
	// Types that are valid to be assigned to Http:
	//
	//	*RecordV1_HttpV1
	Http          isRecordV1_Http `protobuf_oneof:"http"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordV1) Reset() {
	*x = RecordV1{}
	mi := &file_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordV1) ProtoMessage() {}

func (x *RecordV1) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordV1.ProtoReflect.Descriptor instead.
func (*RecordV1) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

func (x *RecordV1) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RecordV1) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SeverityUnspecified
}

func (x *RecordV1) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecordV1) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

func (x *RecordV1) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *RecordV1) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *RecordV1) GetStackTrace() []string {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *RecordV1) GetDynamic() *structpb.Struct {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *RecordV1) GetAuth() isRecordV1_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RecordV1) GetAuthV1() *AuthenticationV1 {
	if x != nil {
		if x, ok := x.Auth.(*RecordV1_AuthV1); ok {
			return x.AuthV1
		}
	}
	return nil
}

func (x *RecordV1) GetApi() isRecordV1_Api {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *RecordV1) GetApiV1() *APIRequestV1 {
	if x != nil {
		if x, ok := x.Api.(*RecordV1_ApiV1); ok {
			return x.ApiV1
		}
	}
	return nil
}

func (x *RecordV1) GetHttp() isRecordV1_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *RecordV1) GetHttpV1() *HTTPRequestV1 {
	if x != nil {
		if x, ok := x.Http.(*RecordV1_HttpV1); ok {
			return x.HttpV1
		}
	}
	return nil
}

type isRecordV1_Auth interface {
	isRecordV1_Auth()
}

type RecordV1_AuthV1 struct {
	AuthV1 *AuthenticationV1 `protobuf:"bytes,20,opt,name=auth_v1,json=authV1,proto3,oneof"`
}

func (*RecordV1_AuthV1) isRecordV1_Auth() {}

type isRecordV1_Api interface {
	isRecordV1_Api()
}

type RecordV1_ApiV1 struct {
	ApiV1 *APIRequestV1 `protobuf:"bytes,30,opt,name=api_v1,json=apiV1,proto3,oneof"`
}

func (*RecordV1_ApiV1) isRecordV1_Api() {}

type isRecordV1_Http interface {
	isRecordV1_Http()
}

type RecordV1_HttpV1 struct {
	HttpV1 *HTTPRequestV1 `protobuf:"bytes,40,opt,name=http_v1,json=httpV1,proto3,oneof"`
}

func (*RecordV1_HttpV1) isRecordV1_Http() {}

type APIRequestV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Resource      *string                `protobuf:"bytes,3,opt,name=resource,proto3,oneof" json:"resource,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *APIRequestV1) Reset() {
	*x = APIRequestV1{}
	mi := &file_record_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestV1) ProtoMessage() {}

func (x *APIRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestV1.ProtoReflect.Descriptor instead.
func (*APIRequestV1) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

func (x *APIRequestV1) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *APIRequestV1) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *APIRequestV1) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

type AuthenticationV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Method        AuthMethod             `protobuf:"varint,4,opt,name=method,proto3,enum=AuthMethod" json:"method,omitempty"`
	Success       bool                   `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticationV1) Reset() {
	*x = AuthenticationV1{}
	mi := &file_record_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticationV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationV1) ProtoMessage() {}

func (x *AuthenticationV1) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationV1.ProtoReflect.Descriptor instead.
func (*AuthenticationV1) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{3}
}

func (x *AuthenticationV1) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AuthenticationV1) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AuthenticationV1) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuthenticationV1) GetMethod() AuthMethod {
	if x != nil {
		return x.Method
	}
	return AuthMethod_AuthMethodUnspecified
}

func (x *AuthenticationV1) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type HTTPRequestV1 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Protocol        string                 `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Host            string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Path            string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Method          HTTPMethod             `protobuf:"varint,4,opt,name=method,proto3,enum=HTTPMethod" json:"method,omitempty"`
	Status          int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Referer         string                 `protobuf:"bytes,6,opt,name=referer,proto3" json:"referer,omitempty"`
	UserAgent       string                 `protobuf:"bytes,7,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	RemoteIp        string                 `protobuf:"bytes,8,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	IsSystemUser    *bool                  `protobuf:"varint,9,opt,name=is_system_user,json=isSystemUser,proto3,oneof" json:"is_system_user,omitempty"`
	RequestBody     []byte                 `protobuf:"bytes,10,opt,name=request_body,json=requestBody,proto3,oneof" json:"request_body,omitempty"`
	RequestHeaders  map[string]string      `protobuf:"bytes,11,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RequestBytes    uint64                 `protobuf:"varint,12,opt,name=request_bytes,json=requestBytes,proto3" json:"request_bytes,omitempty"`
	ResponseHeaders map[string]string      `protobuf:"bytes,13,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ResponseBody    []byte                 `protobuf:"bytes,14,opt,name=response_body,json=responseBody,proto3,oneof" json:"response_body,omitempty"`
	ResponseBytes   uint64                 `protobuf:"varint,15,opt,name=response_bytes,json=responseBytes,proto3" json:"response_bytes,omitempty"`
	Latency         *durationpb.Duration   `protobuf:"bytes,16,opt,name=latency,proto3" json:"latency,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HTTPRequestV1) Reset() {
	*x = HTTPRequestV1{}
	mi := &file_record_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestV1) ProtoMessage() {}

func (x *HTTPRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestV1.ProtoReflect.Descriptor instead.
func (*HTTPRequestV1) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{4}
}

func (x *HTTPRequestV1) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *HTTPRequestV1) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HTTPRequestV1) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPRequestV1) GetMethod() HTTPMethod {
	if x != nil {
		return x.Method
	}
	return HTTPMethod_HTTPMethodUndefined
}

func (x *HTTPRequestV1) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HTTPRequestV1) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *HTTPRequestV1) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *HTTPRequestV1) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *HTTPRequestV1) GetIsSystemUser() bool {
	if x != nil && x.IsSystemUser != nil {
		return *x.IsSystemUser
	}
	return false
}

func (x *HTTPRequestV1) GetRequestBody() []byte {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

func (x *HTTPRequestV1) GetRequestHeaders() map[string]string {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *HTTPRequestV1) GetRequestBytes() uint64 {
	if x != nil {
		return x.RequestBytes
	}
	return 0
}

func (x *HTTPRequestV1) GetResponseHeaders() map[string]string {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *HTTPRequestV1) GetResponseBody() []byte {
	if x != nil {
		return x.ResponseBody
	}
	return nil
}

func (x *HTTPRequestV1) GetResponseBytes() uint64 {
	if x != nil {
		return x.ResponseBytes
	}
	return 0
}

func (x *HTTPRequestV1) GetLatency() *durationpb.Duration {
	if x != nil {
		return x.Latency
	}
	return nil
}

var File_record_proto protoreflect.FileDescriptor

var file_record_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x31, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56,
	0x31, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xfd, 0x03, 0x0a, 0x08,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x76, 0x31, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x56, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x70,
	0x69, 0x5f, 0x76, 0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x48, 0x01, 0x52, 0x05, 0x61, 0x70, 0x69,
	0x56, 0x31, 0x12, 0x29, 0x0a, 0x07, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x31, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x31, 0x48, 0x02, 0x52, 0x06, 0x68, 0x74, 0x74, 0x70, 0x56, 0x31, 0x42, 0x06, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x42, 0x06, 0x0a, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x14, 0x4a,
	0x04, 0x08, 0x15, 0x10, 0x1e, 0x4a, 0x04, 0x08, 0x1f, 0x10, 0x28, 0x22, 0x6e, 0x0a, 0x0c, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x10,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xbd, 0x06, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x2a, 0x87, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x10,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x61, 0x74, 0x61, 0x6c, 0x10, 0x18, 0x22, 0x04, 0x08, 0x01, 0x10, 0x03, 0x22, 0x04, 0x08, 0x05,
	0x10, 0x07, 0x22, 0x04, 0x08, 0x09, 0x10, 0x0b, 0x22, 0x04, 0x08, 0x0d, 0x10, 0x0f, 0x22, 0x04,
	0x08, 0x11, 0x10, 0x13, 0x22, 0x04, 0x08, 0x15, 0x10, 0x17, 0x2a, 0x89, 0x01, 0x0a, 0x0a, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x49, 0x44,
	0x43, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x50, 0x49, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x05, 0x2a, 0x69, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x13, 0x22, 0x04, 0x08, 0x06, 0x10,
	0x12, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_record_proto_rawDescOnce sync.Once
	file_record_proto_rawDescData = file_record_proto_rawDesc
)

func file_record_proto_rawDescGZIP() []byte {
	file_record_proto_rawDescOnce.Do(func() {
		file_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_proto_rawDescData)
	})
	return file_record_proto_rawDescData
}

var file_record_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_record_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_record_proto_goTypes = []any{
	(Severity)(0),                 // 0: Severity
	(AuthMethod)(0),               // 1: AuthMethod
	(HTTPMethod)(0),               // 2: HTTPMethod
	(*Record)(nil),                // 3: Record
	(*RecordV1)(nil),              // 4: RecordV1
	(*APIRequestV1)(nil),          // 5: APIRequestV1
	(*AuthenticationV1)(nil),      // 6: AuthenticationV1
	(*HTTPRequestV1)(nil),         // 7: HTTPRequestV1
	nil,                           // 8: HTTPRequestV1.RequestHeadersEntry
	nil,                           // 9: HTTPRequestV1.ResponseHeadersEntry
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 11: google.protobuf.Struct
	(*durationpb.Duration)(nil),   // 12: google.protobuf.Duration
}
var file_record_proto_depIdxs = []int32{
	4,  // 0: Record.record_v1:type_name -> RecordV1
	10, // 1: RecordV1.time:type_name -> google.protobuf.Timestamp
	0,  // 2: RecordV1.severity:type_name -> Severity
	11, // 3: RecordV1.dynamic:type_name -> google.protobuf.Struct
	6,  // 4: RecordV1.auth_v1:type_name -> AuthenticationV1
	5,  // 5: RecordV1.api_v1:type_name -> APIRequestV1
	7,  // 6: RecordV1.http_v1:type_name -> HTTPRequestV1
	1,  // 7: AuthenticationV1.method:type_name -> AuthMethod
	2,  // 8: HTTPRequestV1.method:type_name -> HTTPMethod
	8,  // 9: HTTPRequestV1.request_headers:type_name -> HTTPRequestV1.RequestHeadersEntry
	9,  // 10: HTTPRequestV1.response_headers:type_name -> HTTPRequestV1.ResponseHeadersEntry
	12, // 11: HTTPRequestV1.latency:type_name -> google.protobuf.Duration
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_record_proto_init() }
func file_record_proto_init() {
	if File_record_proto != nil {
		return
	}
	file_record_proto_msgTypes[0].OneofWrappers = []any{
		(*Record_RecordV1)(nil),
	}
	file_record_proto_msgTypes[1].OneofWrappers = []any{
		(*RecordV1_AuthV1)(nil),
		(*RecordV1_ApiV1)(nil),
		(*RecordV1_HttpV1)(nil),
	}
	file_record_proto_msgTypes[2].OneofWrappers = []any{}
	file_record_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_record_proto_goTypes,
		DependencyIndexes: file_record_proto_depIdxs,
		EnumInfos:         file_record_proto_enumTypes,
		MessageInfos:      file_record_proto_msgTypes,
	}.Build()
	File_record_proto = out.File
	file_record_proto_rawDesc = nil
	file_record_proto_goTypes = nil
	file_record_proto_depIdxs = nil
}

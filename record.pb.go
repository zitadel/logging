// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.21.12
// source: record.proto

package logging

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Severity numbers are inspired by OTEL severity numbers.
// https://opentelemetry.io/docs/specs/otel/logs/data-model/#mapping-of-severitynumber
// The gaps allow to insert special levels in the future.
type RecordV1_Severity int32

const (
	RecordV1_SeverityUndefined RecordV1_Severity = 0
	RecordV1_Trace             RecordV1_Severity = 4
	RecordV1_Debug             RecordV1_Severity = 8
	RecordV1_Info              RecordV1_Severity = 12
	RecordV1_Warn              RecordV1_Severity = 16
	RecordV1_Error             RecordV1_Severity = 20
	RecordV1_Fatal             RecordV1_Severity = 24
)

// Enum value maps for RecordV1_Severity.
var (
	RecordV1_Severity_name = map[int32]string{
		0:  "SeverityUndefined",
		4:  "Trace",
		8:  "Debug",
		12: "Info",
		16: "Warn",
		20: "Error",
		24: "Fatal",
	}
	RecordV1_Severity_value = map[string]int32{
		"SeverityUndefined": 0,
		"Trace":             4,
		"Debug":             8,
		"Info":              12,
		"Warn":              16,
		"Error":             20,
		"Fatal":             24,
	}
)

func (x RecordV1_Severity) Enum() *RecordV1_Severity {
	p := new(RecordV1_Severity)
	*p = x
	return p
}

func (x RecordV1_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordV1_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[0].Descriptor()
}

func (RecordV1_Severity) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[0]
}

func (x RecordV1_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordV1_Severity.Descriptor instead.
func (RecordV1_Severity) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1, 0}
}

type RecordV1_HTTPRequest_Method int32

const (
	RecordV1_HTTPRequest_MethodUndefined RecordV1_HTTPRequest_Method = 0
	RecordV1_HTTPRequest_GET             RecordV1_HTTPRequest_Method = 1
	RecordV1_HTTPRequest_POST            RecordV1_HTTPRequest_Method = 2
	RecordV1_HTTPRequest_PUT             RecordV1_HTTPRequest_Method = 3
	RecordV1_HTTPRequest_PATCH           RecordV1_HTTPRequest_Method = 4
	RecordV1_HTTPRequest_DELETE          RecordV1_HTTPRequest_Method = 5
	RecordV1_HTTPRequest_OTHER           RecordV1_HTTPRequest_Method = 19
)

// Enum value maps for RecordV1_HTTPRequest_Method.
var (
	RecordV1_HTTPRequest_Method_name = map[int32]string{
		0:  "MethodUndefined",
		1:  "GET",
		2:  "POST",
		3:  "PUT",
		4:  "PATCH",
		5:  "DELETE",
		19: "OTHER",
	}
	RecordV1_HTTPRequest_Method_value = map[string]int32{
		"MethodUndefined": 0,
		"GET":             1,
		"POST":            2,
		"PUT":             3,
		"PATCH":           4,
		"DELETE":          5,
		"OTHER":           19,
	}
)

func (x RecordV1_HTTPRequest_Method) Enum() *RecordV1_HTTPRequest_Method {
	p := new(RecordV1_HTTPRequest_Method)
	*p = x
	return p
}

func (x RecordV1_HTTPRequest_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordV1_HTTPRequest_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[1].Descriptor()
}

func (RecordV1_HTTPRequest_Method) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[1]
}

func (x RecordV1_HTTPRequest_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordV1_HTTPRequest_Method.Descriptor instead.
func (RecordV1_HTTPRequest_Method) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1, 0, 0}
}

type RecordV1_Authentication_Method int32

const (
	RecordV1_Authentication_MethodUndefined  RecordV1_Authentication_Method = 0
	RecordV1_Authentication_SystemUserToken  RecordV1_Authentication_Method = 1
	RecordV1_Authentication_OIDCAccessToken  RecordV1_Authentication_Method = 2
	RecordV1_Authentication_OIDCRefreshToken RecordV1_Authentication_Method = 3
	RecordV1_Authentication_SessionAPI       RecordV1_Authentication_Method = 4
	RecordV1_Authentication_SAMLResponse     RecordV1_Authentication_Method = 5
)

// Enum value maps for RecordV1_Authentication_Method.
var (
	RecordV1_Authentication_Method_name = map[int32]string{
		0: "MethodUndefined",
		1: "SystemUserToken",
		2: "OIDCAccessToken",
		3: "OIDCRefreshToken",
		4: "SessionAPI",
		5: "SAMLResponse",
	}
	RecordV1_Authentication_Method_value = map[string]int32{
		"MethodUndefined":  0,
		"SystemUserToken":  1,
		"OIDCAccessToken":  2,
		"OIDCRefreshToken": 3,
		"SessionAPI":       4,
		"SAMLResponse":     5,
	}
)

func (x RecordV1_Authentication_Method) Enum() *RecordV1_Authentication_Method {
	p := new(RecordV1_Authentication_Method)
	*p = x
	return p
}

func (x RecordV1_Authentication_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordV1_Authentication_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_record_proto_enumTypes[2].Descriptor()
}

func (RecordV1_Authentication_Method) Type() protoreflect.EnumType {
	return &file_record_proto_enumTypes[2]
}

func (x RecordV1_Authentication_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordV1_Authentication_Method.Descriptor instead.
func (RecordV1_Authentication_Method) EnumDescriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1, 3, 0}
}

// Because record versions are enumed, deserializing and handling many record versions is easy.
// for example:
// serializedJsonString = `{"record_v1":{ "message":"a record" }}`
// record := &Record
// jsonproto.Unmarshal(serializedJsonString, record)
//
//	switch r := (record.Record.(type)) {
//	   case: *RecordV1:
//	     fmt.Println("msg", r.GetMessage())
//	   case: *RecordV2:
//	     fmt.Println("msg", r.GetText())
//	}
type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Record:
	//
	//	*Record_RecordV1
	Record        isRecord_Record `protobuf_oneof:"record"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetRecord() isRecord_Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *Record) GetRecordV1() *RecordV1 {
	if x != nil {
		if x, ok := x.Record.(*Record_RecordV1); ok {
			return x.RecordV1
		}
	}
	return nil
}

type isRecord_Record interface {
	isRecord_Record()
}

type Record_RecordV1 struct {
	RecordV1 *RecordV1 `protobuf:"bytes,1,opt,name=record_v1,json=recordV1,proto3,oneof"` // RecordV2 record_v2 = 2;
}

func (*Record_RecordV1) isRecord_Record() {}

type RecordV1 struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Time       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Severity   RecordV1_Severity      `protobuf:"varint,2,opt,name=severity,proto3,enum=RecordV1_Severity" json:"severity,omitempty"`
	Message    string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Service    *string                `protobuf:"bytes,4,opt,name=service,proto3,oneof" json:"service,omitempty"`
	Version    *string                `protobuf:"bytes,5,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Process    *string                `protobuf:"bytes,6,opt,name=process,proto3,oneof" json:"process,omitempty"` // for example pod ID
	InstanceId *string                `protobuf:"bytes,7,opt,name=instance_id,json=instanceId,proto3,oneof" json:"instance_id,omitempty"`
	Dynamic    *structpb.Struct       `protobuf:"bytes,8,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	StackTrace []string               `protobuf:"bytes,9,rep,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	TraceId    *string                `protobuf:"bytes,10,opt,name=trace_id,json=traceId,proto3,oneof" json:"trace_id,omitempty"`
	SpanId     *string                `protobuf:"bytes,11,opt,name=span_id,json=spanId,proto3,oneof" json:"span_id,omitempty"`
	// Types that are valid to be assigned to Stream:
	//
	//	*RecordV1_Http
	//	*RecordV1_Api
	//	*RecordV1_Authn
	//	*RecordV1_Authz
	Stream        isRecordV1_Stream `protobuf_oneof:"stream"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordV1) Reset() {
	*x = RecordV1{}
	mi := &file_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordV1) ProtoMessage() {}

func (x *RecordV1) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordV1.ProtoReflect.Descriptor instead.
func (*RecordV1) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

func (x *RecordV1) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RecordV1) GetSeverity() RecordV1_Severity {
	if x != nil {
		return x.Severity
	}
	return RecordV1_SeverityUndefined
}

func (x *RecordV1) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecordV1) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

func (x *RecordV1) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *RecordV1) GetProcess() string {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return ""
}

func (x *RecordV1) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *RecordV1) GetDynamic() *structpb.Struct {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *RecordV1) GetStackTrace() []string {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *RecordV1) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *RecordV1) GetSpanId() string {
	if x != nil && x.SpanId != nil {
		return *x.SpanId
	}
	return ""
}

func (x *RecordV1) GetStream() isRecordV1_Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *RecordV1) GetHttp() *RecordV1_HTTPRequest {
	if x != nil {
		if x, ok := x.Stream.(*RecordV1_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *RecordV1) GetApi() *RecordV1_APICall {
	if x != nil {
		if x, ok := x.Stream.(*RecordV1_Api); ok {
			return x.Api
		}
	}
	return nil
}

func (x *RecordV1) GetAuthn() *RecordV1_Authentication {
	if x != nil {
		if x, ok := x.Stream.(*RecordV1_Authn); ok {
			return x.Authn
		}
	}
	return nil
}

func (x *RecordV1) GetAuthz() *RecordV1_Authorization {
	if x != nil {
		if x, ok := x.Stream.(*RecordV1_Authz); ok {
			return x.Authz
		}
	}
	return nil
}

type isRecordV1_Stream interface {
	isRecordV1_Stream()
}

type RecordV1_Http struct {
	Http *RecordV1_HTTPRequest `protobuf:"bytes,30,opt,name=http,proto3,oneof"`
}

type RecordV1_Api struct {
	Api *RecordV1_APICall `protobuf:"bytes,31,opt,name=api,proto3,oneof"`
}

type RecordV1_Authn struct {
	Authn *RecordV1_Authentication `protobuf:"bytes,33,opt,name=authn,proto3,oneof"`
}

type RecordV1_Authz struct {
	Authz *RecordV1_Authorization `protobuf:"bytes,32,opt,name=authz,proto3,oneof"`
}

func (*RecordV1_Http) isRecordV1_Stream() {}

func (*RecordV1_Api) isRecordV1_Stream() {}

func (*RecordV1_Authn) isRecordV1_Stream() {}

func (*RecordV1_Authz) isRecordV1_Stream() {}

type RecordV1_HTTPRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Protocol      string                        `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Host          string                        `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Path          string                        `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Method        RecordV1_HTTPRequest_Method   `protobuf:"varint,4,opt,name=method,proto3,enum=RecordV1_HTTPRequest_Method" json:"method,omitempty"`
	Status        int32                         `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Referer       string                        `protobuf:"bytes,6,opt,name=referer,proto3" json:"referer,omitempty"`
	UserAgent     string                        `protobuf:"bytes,7,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	RemoteIp      string                        `protobuf:"bytes,8,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	Request       *RecordV1_HTTPRequest_Message `protobuf:"bytes,9,opt,name=request,proto3,oneof" json:"request,omitempty"`
	Response      *RecordV1_HTTPRequest_Message `protobuf:"bytes,10,opt,name=response,proto3,oneof" json:"response,omitempty"`
	Latency       *durationpb.Duration          `protobuf:"bytes,17,opt,name=latency,proto3" json:"latency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordV1_HTTPRequest) Reset() {
	*x = RecordV1_HTTPRequest{}
	mi := &file_record_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordV1_HTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordV1_HTTPRequest) ProtoMessage() {}

func (x *RecordV1_HTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordV1_HTTPRequest.ProtoReflect.Descriptor instead.
func (*RecordV1_HTTPRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RecordV1_HTTPRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RecordV1_HTTPRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RecordV1_HTTPRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RecordV1_HTTPRequest) GetMethod() RecordV1_HTTPRequest_Method {
	if x != nil {
		return x.Method
	}
	return RecordV1_HTTPRequest_MethodUndefined
}

func (x *RecordV1_HTTPRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RecordV1_HTTPRequest) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *RecordV1_HTTPRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *RecordV1_HTTPRequest) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *RecordV1_HTTPRequest) GetRequest() *RecordV1_HTTPRequest_Message {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RecordV1_HTTPRequest) GetResponse() *RecordV1_HTTPRequest_Message {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RecordV1_HTTPRequest) GetLatency() *durationpb.Duration {
	if x != nil {
		return x.Latency
	}
	return nil
}

type RecordV1_APICall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Resource      *string                `protobuf:"bytes,3,opt,name=resource,proto3,oneof" json:"resource,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordV1_APICall) Reset() {
	*x = RecordV1_APICall{}
	mi := &file_record_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordV1_APICall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordV1_APICall) ProtoMessage() {}

func (x *RecordV1_APICall) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordV1_APICall.ProtoReflect.Descriptor instead.
func (*RecordV1_APICall) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RecordV1_APICall) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *RecordV1_APICall) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RecordV1_APICall) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

type RecordV1_Authorization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ClientId      *string                `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3,oneof" json:"client_id,omitempty"`
	ProjectId     *string                `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordV1_Authorization) Reset() {
	*x = RecordV1_Authorization{}
	mi := &file_record_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordV1_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordV1_Authorization) ProtoMessage() {}

func (x *RecordV1_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordV1_Authorization.ProtoReflect.Descriptor instead.
func (*RecordV1_Authorization) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1, 2}
}

func (x *RecordV1_Authorization) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RecordV1_Authorization) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *RecordV1_Authorization) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *RecordV1_Authorization) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type RecordV1_Authentication struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Method        RecordV1_Authentication_Method `protobuf:"varint,3,opt,name=method,proto3,enum=RecordV1_Authentication_Method" json:"method,omitempty"`
	Success       *bool                          `protobuf:"varint,4,opt,name=success,proto3,oneof" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordV1_Authentication) Reset() {
	*x = RecordV1_Authentication{}
	mi := &file_record_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordV1_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordV1_Authentication) ProtoMessage() {}

func (x *RecordV1_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordV1_Authentication.ProtoReflect.Descriptor instead.
func (*RecordV1_Authentication) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1, 3}
}

func (x *RecordV1_Authentication) GetMethod() RecordV1_Authentication_Method {
	if x != nil {
		return x.Method
	}
	return RecordV1_Authentication_MethodUndefined
}

func (x *RecordV1_Authentication) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type RecordV1_HTTPRequest_Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Headers       map[string]string      `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RequestBody   []byte                 `protobuf:"bytes,2,opt,name=request_body,json=requestBody,proto3,oneof" json:"request_body,omitempty"`
	Bytes         uint64                 `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordV1_HTTPRequest_Message) Reset() {
	*x = RecordV1_HTTPRequest_Message{}
	mi := &file_record_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordV1_HTTPRequest_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordV1_HTTPRequest_Message) ProtoMessage() {}

func (x *RecordV1_HTTPRequest_Message) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordV1_HTTPRequest_Message.ProtoReflect.Descriptor instead.
func (*RecordV1_HTTPRequest_Message) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *RecordV1_HTTPRequest_Message) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RecordV1_HTTPRequest_Message) GetRequestBody() []byte {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

func (x *RecordV1_HTTPRequest_Message) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

var File_record_proto protoreflect.FileDescriptor

var file_record_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x31, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56,
	0x31, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xc0, 0x10, 0x0a, 0x08,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x73, 0x70,
	0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x12, 0x25, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31, 0x2e, 0x41, 0x50, 0x49,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x30, 0x0a, 0x05, 0x61,
	0x75, 0x74, 0x68, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x56, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x12, 0x2f, 0x0a,
	0x05, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x1a, 0x80,
	0x06, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56,
	0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xda, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x61, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x13, 0x22, 0x04, 0x08, 0x06, 0x10, 0x12, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x69, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xa2, 0x01, 0x0a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x1a, 0xf5, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x22, 0x7f, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x50, 0x49, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x41, 0x4d, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x05, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x0c, 0x12, 0x08, 0x0a,
	0x04, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x10, 0x18, 0x22, 0x04, 0x08,
	0x01, 0x10, 0x03, 0x22, 0x04, 0x08, 0x05, 0x10, 0x07, 0x22, 0x04, 0x08, 0x09, 0x10, 0x0b, 0x22,
	0x04, 0x08, 0x0d, 0x10, 0x0f, 0x22, 0x04, 0x08, 0x11, 0x10, 0x13, 0x22, 0x04, 0x08, 0x15, 0x10,
	0x17, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x1e, 0x42, 0x1c,
	0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_record_proto_rawDescOnce sync.Once
	file_record_proto_rawDescData = file_record_proto_rawDesc
)

func file_record_proto_rawDescGZIP() []byte {
	file_record_proto_rawDescOnce.Do(func() {
		file_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_proto_rawDescData)
	})
	return file_record_proto_rawDescData
}

var file_record_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_record_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_record_proto_goTypes = []any{
	(RecordV1_Severity)(0),               // 0: RecordV1.Severity
	(RecordV1_HTTPRequest_Method)(0),     // 1: RecordV1.HTTPRequest.Method
	(RecordV1_Authentication_Method)(0),  // 2: RecordV1.Authentication.Method
	(*Record)(nil),                       // 3: Record
	(*RecordV1)(nil),                     // 4: RecordV1
	(*RecordV1_HTTPRequest)(nil),         // 5: RecordV1.HTTPRequest
	(*RecordV1_APICall)(nil),             // 6: RecordV1.APICall
	(*RecordV1_Authorization)(nil),       // 7: RecordV1.Authorization
	(*RecordV1_Authentication)(nil),      // 8: RecordV1.Authentication
	(*RecordV1_HTTPRequest_Message)(nil), // 9: RecordV1.HTTPRequest.Message
	nil,                                  // 10: RecordV1.HTTPRequest.Message.HeadersEntry
	(*timestamppb.Timestamp)(nil),        // 11: google.protobuf.Timestamp
	(*structpb.Struct)(nil),              // 12: google.protobuf.Struct
	(*durationpb.Duration)(nil),          // 13: google.protobuf.Duration
}
var file_record_proto_depIdxs = []int32{
	4,  // 0: Record.record_v1:type_name -> RecordV1
	11, // 1: RecordV1.time:type_name -> google.protobuf.Timestamp
	0,  // 2: RecordV1.severity:type_name -> RecordV1.Severity
	12, // 3: RecordV1.dynamic:type_name -> google.protobuf.Struct
	5,  // 4: RecordV1.http:type_name -> RecordV1.HTTPRequest
	6,  // 5: RecordV1.api:type_name -> RecordV1.APICall
	8,  // 6: RecordV1.authn:type_name -> RecordV1.Authentication
	7,  // 7: RecordV1.authz:type_name -> RecordV1.Authorization
	1,  // 8: RecordV1.HTTPRequest.method:type_name -> RecordV1.HTTPRequest.Method
	9,  // 9: RecordV1.HTTPRequest.request:type_name -> RecordV1.HTTPRequest.Message
	9,  // 10: RecordV1.HTTPRequest.response:type_name -> RecordV1.HTTPRequest.Message
	13, // 11: RecordV1.HTTPRequest.latency:type_name -> google.protobuf.Duration
	2,  // 12: RecordV1.Authentication.method:type_name -> RecordV1.Authentication.Method
	10, // 13: RecordV1.HTTPRequest.Message.headers:type_name -> RecordV1.HTTPRequest.Message.HeadersEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_record_proto_init() }
func file_record_proto_init() {
	if File_record_proto != nil {
		return
	}
	file_record_proto_msgTypes[0].OneofWrappers = []any{
		(*Record_RecordV1)(nil),
	}
	file_record_proto_msgTypes[1].OneofWrappers = []any{
		(*RecordV1_Http)(nil),
		(*RecordV1_Api)(nil),
		(*RecordV1_Authn)(nil),
		(*RecordV1_Authz)(nil),
	}
	file_record_proto_msgTypes[2].OneofWrappers = []any{}
	file_record_proto_msgTypes[3].OneofWrappers = []any{}
	file_record_proto_msgTypes[4].OneofWrappers = []any{}
	file_record_proto_msgTypes[5].OneofWrappers = []any{}
	file_record_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_record_proto_goTypes,
		DependencyIndexes: file_record_proto_depIdxs,
		EnumInfos:         file_record_proto_enumTypes,
		MessageInfos:      file_record_proto_msgTypes,
	}.Build()
	File_record_proto = out.File
	file_record_proto_rawDesc = nil
	file_record_proto_goTypes = nil
	file_record_proto_depIdxs = nil
}

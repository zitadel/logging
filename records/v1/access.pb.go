// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.21.12
// source: access.proto

package record_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Severity numbers are inspired by OTEL severity numbers.
// https://opentelemetry.io/docs/specs/otel/logs/data-model/#mapping-of-severitynumber
// The gaps allow to insert special levels in the future.
type AccessRecord_Severity int32

const (
	AccessRecord_SeverityUndefined AccessRecord_Severity = 0
	AccessRecord_Trace             AccessRecord_Severity = 4
	AccessRecord_Debug             AccessRecord_Severity = 8
	AccessRecord_Info              AccessRecord_Severity = 12
	AccessRecord_Warn              AccessRecord_Severity = 16
	AccessRecord_Error             AccessRecord_Severity = 20
	AccessRecord_Fatal             AccessRecord_Severity = 24
)

// Enum value maps for AccessRecord_Severity.
var (
	AccessRecord_Severity_name = map[int32]string{
		0:  "SeverityUndefined",
		4:  "Trace",
		8:  "Debug",
		12: "Info",
		16: "Warn",
		20: "Error",
		24: "Fatal",
	}
	AccessRecord_Severity_value = map[string]int32{
		"SeverityUndefined": 0,
		"Trace":             4,
		"Debug":             8,
		"Info":              12,
		"Warn":              16,
		"Error":             20,
		"Fatal":             24,
	}
)

func (x AccessRecord_Severity) Enum() *AccessRecord_Severity {
	p := new(AccessRecord_Severity)
	*p = x
	return p
}

func (x AccessRecord_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessRecord_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_access_proto_enumTypes[0].Descriptor()
}

func (AccessRecord_Severity) Type() protoreflect.EnumType {
	return &file_access_proto_enumTypes[0]
}

func (x AccessRecord_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessRecord_Severity.Descriptor instead.
func (AccessRecord_Severity) EnumDescriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 0}
}

type AccessRecord_HTTPRequest_Method int32

const (
	AccessRecord_HTTPRequest_MethodUndefined AccessRecord_HTTPRequest_Method = 0
	AccessRecord_HTTPRequest_GET             AccessRecord_HTTPRequest_Method = 1
	AccessRecord_HTTPRequest_POST            AccessRecord_HTTPRequest_Method = 2
	AccessRecord_HTTPRequest_PUT             AccessRecord_HTTPRequest_Method = 3
	AccessRecord_HTTPRequest_PATCH           AccessRecord_HTTPRequest_Method = 4
	AccessRecord_HTTPRequest_DELETE          AccessRecord_HTTPRequest_Method = 5
)

// Enum value maps for AccessRecord_HTTPRequest_Method.
var (
	AccessRecord_HTTPRequest_Method_name = map[int32]string{
		0: "MethodUndefined",
		1: "GET",
		2: "POST",
		3: "PUT",
		4: "PATCH",
		5: "DELETE",
	}
	AccessRecord_HTTPRequest_Method_value = map[string]int32{
		"MethodUndefined": 0,
		"GET":             1,
		"POST":            2,
		"PUT":             3,
		"PATCH":           4,
		"DELETE":          5,
	}
)

func (x AccessRecord_HTTPRequest_Method) Enum() *AccessRecord_HTTPRequest_Method {
	p := new(AccessRecord_HTTPRequest_Method)
	*p = x
	return p
}

func (x AccessRecord_HTTPRequest_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessRecord_HTTPRequest_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_access_proto_enumTypes[1].Descriptor()
}

func (AccessRecord_HTTPRequest_Method) Type() protoreflect.EnumType {
	return &file_access_proto_enumTypes[1]
}

func (x AccessRecord_HTTPRequest_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessRecord_HTTPRequest_Method.Descriptor instead.
func (AccessRecord_HTTPRequest_Method) EnumDescriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4, 0}
}

type AccessRecord struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Time       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Severity   AccessRecord_Severity  `protobuf:"varint,2,opt,name=severity,proto3,enum=AccessRecord_Severity" json:"severity,omitempty"`
	Message    string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	InstanceId *string                `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3,oneof" json:"instance_id,omitempty"` // The zitadel instance ID.
	Dynamic    *structpb.Struct       `protobuf:"bytes,5,opt,name=dynamic,proto3" json:"dynamic,omitempty"`                               // Dynamically typed fields that add additional information
	// stack_trace is always added for logs with:
	// - level >= Error
	// - level <= Trace
	StackTrace []string `protobuf:"bytes,6,rep,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	// trace_id is added to all request_scoped logs
	// within a requests scope, trace_id doesn't change
	TraceId *string `protobuf:"bytes,7,opt,name=trace_id,json=traceId,proto3,oneof" json:"trace_id,omitempty"`
	// span_id is added to all request_scoped logs
	SpanId        *string                      `protobuf:"bytes,8,opt,name=span_id,json=spanId,proto3,oneof" json:"span_id,omitempty"`
	Service       *AccessRecord_ServiceContext `protobuf:"bytes,30,opt,name=service,proto3,oneof" json:"service,omitempty"`
	Exception     *AccessRecord_Exception      `protobuf:"bytes,31,opt,name=exception,proto3,oneof" json:"exception,omitempty"`
	Api           *AccessRecord_APIContext     `protobuf:"bytes,32,opt,name=api,proto3,oneof" json:"api,omitempty"`
	User          *AccessRecord_UserContext    `protobuf:"bytes,33,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Http          *AccessRecord_HTTPRequest    `protobuf:"bytes,34,opt,name=http,proto3,oneof" json:"http,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRecord) Reset() {
	*x = AccessRecord{}
	mi := &file_access_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecord) ProtoMessage() {}

func (x *AccessRecord) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecord.ProtoReflect.Descriptor instead.
func (*AccessRecord) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0}
}

func (x *AccessRecord) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AccessRecord) GetSeverity() AccessRecord_Severity {
	if x != nil {
		return x.Severity
	}
	return AccessRecord_SeverityUndefined
}

func (x *AccessRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AccessRecord) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *AccessRecord) GetDynamic() *structpb.Struct {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *AccessRecord) GetStackTrace() []string {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *AccessRecord) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *AccessRecord) GetSpanId() string {
	if x != nil && x.SpanId != nil {
		return *x.SpanId
	}
	return ""
}

func (x *AccessRecord) GetService() *AccessRecord_ServiceContext {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *AccessRecord) GetException() *AccessRecord_Exception {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *AccessRecord) GetApi() *AccessRecord_APIContext {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *AccessRecord) GetUser() *AccessRecord_UserContext {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AccessRecord) GetHttp() *AccessRecord_HTTPRequest {
	if x != nil {
		return x.Http
	}
	return nil
}

type AccessRecord_ServiceContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       *string                `protobuf:"bytes,1,opt,name=service,proto3,oneof" json:"service,omitempty"` // for example "zitadel"
	Version       *string                `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"` // for example "v2.67.2"
	Process       *string                `protobuf:"bytes,3,opt,name=process,proto3,oneof" json:"process,omitempty"` // for example the Kubernetes pod ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRecord_ServiceContext) Reset() {
	*x = AccessRecord_ServiceContext{}
	mi := &file_access_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRecord_ServiceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecord_ServiceContext) ProtoMessage() {}

func (x *AccessRecord_ServiceContext) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecord_ServiceContext.ProtoReflect.Descriptor instead.
func (*AccessRecord_ServiceContext) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AccessRecord_ServiceContext) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

func (x *AccessRecord_ServiceContext) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *AccessRecord_ServiceContext) GetProcess() string {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return ""
}

type AccessRecord_Exception struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`   // The ZitadelError id
	Key           *string                `protobuf:"bytes,2,opt,name=key,proto3,oneof" json:"key,omitempty"` // The ZitadelError i18n key
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRecord_Exception) Reset() {
	*x = AccessRecord_Exception{}
	mi := &file_access_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRecord_Exception) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecord_Exception) ProtoMessage() {}

func (x *AccessRecord_Exception) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecord_Exception.ProtoReflect.Descriptor instead.
func (*AccessRecord_Exception) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AccessRecord_Exception) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AccessRecord_Exception) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *AccessRecord_Exception) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AccessRecord_APIContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Resource      *string                `protobuf:"bytes,3,opt,name=resource,proto3,oneof" json:"resource,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRecord_APIContext) Reset() {
	*x = AccessRecord_APIContext{}
	mi := &file_access_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRecord_APIContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecord_APIContext) ProtoMessage() {}

func (x *AccessRecord_APIContext) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecord_APIContext.ProtoReflect.Descriptor instead.
func (*AccessRecord_APIContext) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AccessRecord_APIContext) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AccessRecord_APIContext) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AccessRecord_APIContext) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

type AccessRecord_UserContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrgId         string                 `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ClientId      *string                `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3,oneof" json:"client_id,omitempty"`
	ProjectId     *string                `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRecord_UserContext) Reset() {
	*x = AccessRecord_UserContext{}
	mi := &file_access_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRecord_UserContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecord_UserContext) ProtoMessage() {}

func (x *AccessRecord_UserContext) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecord_UserContext.ProtoReflect.Descriptor instead.
func (*AccessRecord_UserContext) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AccessRecord_UserContext) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccessRecord_UserContext) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AccessRecord_UserContext) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *AccessRecord_UserContext) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type AccessRecord_HTTPRequest struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Protocol      string                            `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Host          string                            `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Path          string                            `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Method        AccessRecord_HTTPRequest_Method   `protobuf:"varint,4,opt,name=method,proto3,enum=AccessRecord_HTTPRequest_Method" json:"method,omitempty"`
	Status        int32                             `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Referer       string                            `protobuf:"bytes,6,opt,name=referer,proto3" json:"referer,omitempty"`
	UserAgent     string                            `protobuf:"bytes,7,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	RemoteIp      string                            `protobuf:"bytes,8,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	Latency       *durationpb.Duration              `protobuf:"bytes,9,opt,name=latency,proto3" json:"latency,omitempty"`
	Request       *AccessRecord_HTTPRequest_Message `protobuf:"bytes,10,opt,name=request,proto3,oneof" json:"request,omitempty"`
	Response      *AccessRecord_HTTPRequest_Message `protobuf:"bytes,11,opt,name=response,proto3,oneof" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRecord_HTTPRequest) Reset() {
	*x = AccessRecord_HTTPRequest{}
	mi := &file_access_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRecord_HTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecord_HTTPRequest) ProtoMessage() {}

func (x *AccessRecord_HTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecord_HTTPRequest.ProtoReflect.Descriptor instead.
func (*AccessRecord_HTTPRequest) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AccessRecord_HTTPRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *AccessRecord_HTTPRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AccessRecord_HTTPRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AccessRecord_HTTPRequest) GetMethod() AccessRecord_HTTPRequest_Method {
	if x != nil {
		return x.Method
	}
	return AccessRecord_HTTPRequest_MethodUndefined
}

func (x *AccessRecord_HTTPRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AccessRecord_HTTPRequest) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *AccessRecord_HTTPRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AccessRecord_HTTPRequest) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *AccessRecord_HTTPRequest) GetLatency() *durationpb.Duration {
	if x != nil {
		return x.Latency
	}
	return nil
}

func (x *AccessRecord_HTTPRequest) GetRequest() *AccessRecord_HTTPRequest_Message {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AccessRecord_HTTPRequest) GetResponse() *AccessRecord_HTTPRequest_Message {
	if x != nil {
		return x.Response
	}
	return nil
}

type AccessRecord_HTTPRequest_Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Headers       map[string]string      `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          []byte                 `protobuf:"bytes,2,opt,name=body,proto3,oneof" json:"body,omitempty"`
	Bytes         uint64                 `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRecord_HTTPRequest_Message) Reset() {
	*x = AccessRecord_HTTPRequest_Message{}
	mi := &file_access_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRecord_HTTPRequest_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRecord_HTTPRequest_Message) ProtoMessage() {}

func (x *AccessRecord_HTTPRequest_Message) ProtoReflect() protoreflect.Message {
	mi := &file_access_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRecord_HTTPRequest_Message.ProtoReflect.Descriptor instead.
func (*AccessRecord_HTTPRequest_Message) Descriptor() ([]byte, []int) {
	return file_access_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *AccessRecord_HTTPRequest_Message) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *AccessRecord_HTTPRequest_Message) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AccessRecord_HTTPRequest_Message) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

var file_access_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50001,
		Name:          "sensitive",
		Tag:           "varint,50001,opt,name=sensitive",
		Filename:      "access.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50002,
		Name:          "pii",
		Tag:           "varint,50002,opt,name=pii",
		Filename:      "access.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional bool sensitive = 50001;
	E_Sensitive = &file_access_proto_extTypes[0]
	// optional bool pii = 50002;
	E_Pii = &file_access_proto_extTypes[1]
)

var File_access_proto protoreflect.FileDescriptor

var file_access_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xeb, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x70, 0x61,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x03, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x04, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x50, 0x49, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x06, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x07, 0x52,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x88, 0x01, 0x01, 0x1a, 0x91, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x72, 0x0a, 0x09,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79,
	0x1a, 0x6c, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xa6,
	0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x1a, 0x88, 0x06, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x33,
	0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x1a, 0xdb, 0x01, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x50, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x10,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x61, 0x74, 0x61, 0x6c, 0x10, 0x18, 0x22, 0x04, 0x08, 0x01, 0x10, 0x03, 0x22, 0x04, 0x08, 0x05,
	0x10, 0x07, 0x22, 0x04, 0x08, 0x09, 0x10, 0x0b, 0x22, 0x04, 0x08, 0x0d, 0x10, 0x0f, 0x22, 0x04,
	0x08, 0x11, 0x10, 0x13, 0x22, 0x04, 0x08, 0x15, 0x10, 0x17, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x61, 0x70, 0x69, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x1e, 0x3a, 0x3d, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x31, 0x0a, 0x03,
	0x70, 0x69, 0x69, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xd2, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x69, 0x69, 0x42,
	0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_access_proto_rawDescOnce sync.Once
	file_access_proto_rawDescData = file_access_proto_rawDesc
)

func file_access_proto_rawDescGZIP() []byte {
	file_access_proto_rawDescOnce.Do(func() {
		file_access_proto_rawDescData = protoimpl.X.CompressGZIP(file_access_proto_rawDescData)
	})
	return file_access_proto_rawDescData
}

var file_access_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_access_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_access_proto_goTypes = []any{
	(AccessRecord_Severity)(0),               // 0: AccessRecord.Severity
	(AccessRecord_HTTPRequest_Method)(0),     // 1: AccessRecord.HTTPRequest.Method
	(*AccessRecord)(nil),                     // 2: AccessRecord
	(*AccessRecord_ServiceContext)(nil),      // 3: AccessRecord.ServiceContext
	(*AccessRecord_Exception)(nil),           // 4: AccessRecord.Exception
	(*AccessRecord_APIContext)(nil),          // 5: AccessRecord.APIContext
	(*AccessRecord_UserContext)(nil),         // 6: AccessRecord.UserContext
	(*AccessRecord_HTTPRequest)(nil),         // 7: AccessRecord.HTTPRequest
	(*AccessRecord_HTTPRequest_Message)(nil), // 8: AccessRecord.HTTPRequest.Message
	nil,                                      // 9: AccessRecord.HTTPRequest.Message.HeadersEntry
	(*timestamppb.Timestamp)(nil),            // 10: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                  // 11: google.protobuf.Struct
	(*durationpb.Duration)(nil),              // 12: google.protobuf.Duration
	(*descriptorpb.FieldOptions)(nil),        // 13: google.protobuf.FieldOptions
}
var file_access_proto_depIdxs = []int32{
	10, // 0: AccessRecord.time:type_name -> google.protobuf.Timestamp
	0,  // 1: AccessRecord.severity:type_name -> AccessRecord.Severity
	11, // 2: AccessRecord.dynamic:type_name -> google.protobuf.Struct
	3,  // 3: AccessRecord.service:type_name -> AccessRecord.ServiceContext
	4,  // 4: AccessRecord.exception:type_name -> AccessRecord.Exception
	5,  // 5: AccessRecord.api:type_name -> AccessRecord.APIContext
	6,  // 6: AccessRecord.user:type_name -> AccessRecord.UserContext
	7,  // 7: AccessRecord.http:type_name -> AccessRecord.HTTPRequest
	1,  // 8: AccessRecord.HTTPRequest.method:type_name -> AccessRecord.HTTPRequest.Method
	12, // 9: AccessRecord.HTTPRequest.latency:type_name -> google.protobuf.Duration
	8,  // 10: AccessRecord.HTTPRequest.request:type_name -> AccessRecord.HTTPRequest.Message
	8,  // 11: AccessRecord.HTTPRequest.response:type_name -> AccessRecord.HTTPRequest.Message
	9,  // 12: AccessRecord.HTTPRequest.Message.headers:type_name -> AccessRecord.HTTPRequest.Message.HeadersEntry
	13, // 13: sensitive:extendee -> google.protobuf.FieldOptions
	13, // 14: pii:extendee -> google.protobuf.FieldOptions
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	13, // [13:15] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_access_proto_init() }
func file_access_proto_init() {
	if File_access_proto != nil {
		return
	}
	file_access_proto_msgTypes[0].OneofWrappers = []any{}
	file_access_proto_msgTypes[1].OneofWrappers = []any{}
	file_access_proto_msgTypes[2].OneofWrappers = []any{}
	file_access_proto_msgTypes[3].OneofWrappers = []any{}
	file_access_proto_msgTypes[4].OneofWrappers = []any{}
	file_access_proto_msgTypes[5].OneofWrappers = []any{}
	file_access_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_access_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_access_proto_goTypes,
		DependencyIndexes: file_access_proto_depIdxs,
		EnumInfos:         file_access_proto_enumTypes,
		MessageInfos:      file_access_proto_msgTypes,
		ExtensionInfos:    file_access_proto_extTypes,
	}.Build()
	File_access_proto = out.File
	file_access_proto_rawDesc = nil
	file_access_proto_goTypes = nil
	file_access_proto_depIdxs = nil
}
